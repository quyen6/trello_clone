// Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng: X√°c th·ª±c c√°i Jwt accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´ ph√≠a FE c√≥ h·ª£p l·ªá hay kh√¥ng

import { StatusCodes } from "http-status-codes";
import { env } from "~/config/environment";
import { JwtProvider } from "~/providers/JwtProvider";
import ApiError from "~/utils/ApiError";

const isAuthorized = async (req, res, next) => {
  // L·∫•y accessToken n·∫±m trong request cookies ph√≠a client g·ª≠i l√™n - withCredentials trong file authorizeAxios
  const clientAccessToken = req.cookies?.accessToken;

  // N·∫øu nh∆∞ clientACcessToken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói lu√¥n
  if (!clientAccessToken) {
    next(
      new ApiError(StatusCodes.UNAUTHORIZED, "Unauthorized! (token not found)")
    );
    return;
  }

  try {
    // 1. Th·ª±c hi·ªán gi·∫£i m√£ token xem c√≥ h·ª£p l·ªá hay kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    );
    // console.log("üöÄ ~ isAuthorized ~ accessTokenDecoded:", accessTokenDecoded);

    // 2. Quan tr·ªçng: N·∫øu nh∆∞ c√°i token h·ª£p l·ªá, th√¨ s·∫Ω c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o c√°i req.JwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng c·∫ßn x·ª≠ l√Ω ·ªü ph√≠a sau
    // jwtDecoded l√† c√°i ch√∫ng ta t·ª± define
    req.jwtDecoded = accessTokenDecoded;

    // 3. Cho ph√©p c√°c request ƒëi ti·∫øp
    next();
  } catch (error) {
    // console.log("üöÄ ~ isAuthorized ~ error:", error);

    // N·∫øu accessToken b·ªã h·∫øt h·∫°n (expired) th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m·ªôt c√°i m√£ l·ªói GONE-410 cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi api refreshToken
    if (error?.message?.includes("jwt expired")) {
      next(new ApiError(StatusCodes.GONE, "Need to refresh token."));
      return;
    }

    // N·∫øu accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k·ª≥ ƒëi·ªÅu g√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ ch√∫ng ta c·ª© th·∫≥ng tay tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE g·ªçi api sign_out lu√¥n
    next(new ApiError(StatusCodes.UNAUTHORIZED, "Unauthorized!"));
  }
};

export const authMiddleware = {
  isAuthorized,
};
