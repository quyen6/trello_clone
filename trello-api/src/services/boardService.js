/* eslint-disable no-useless-catch */
import { StatusCodes } from "http-status-codes";
import { slugify } from "~/utils/formatters";
import { boardModel } from "~/models/boardModel";
import ApiError from "~/utils/ApiError";
import _ from "lodash";
import { columnModel } from "~/models/columnModel";
import { cardModel } from "~/models/cardModel";
import { DEFAULT_ITEM_PER_PAGE, DEFAULT_PAGE } from "~/utils/constants";
// import { cloneDeep } from "lodash";

const createNew = async (userId, reqBody) => {
  try {
    // X·ª≠ l√Ω logic d·ªØ li·ªáu t√πy ƒë·∫∑c th√π d·ª± √°n
    const newBoard = {
      ...reqBody,
      slug: slugify(reqBody.title),
    };

    // G·ªçi t·ªõi t·∫ßng Model ƒë·ªÉ x·ª≠ l√Ω l∆∞u b·∫£n ghi newBoard v√†o trong Database
    const createdBoard = await boardModel.createNew(userId, newBoard);
    // console.log("üöÄ ~ createNew ~ createdBoard:", createdBoard);

    // L·∫•y b·∫£n ghi board sau khi g·ªçi(t√πy m·ª•c ƒë√≠ch d·ª± √°n m√† c√≥ c√†n b∆∞·ªõc n√†y hay kh√¥ng)
    const getNewBoard = await boardModel.findOneById(createdBoard.insertedId);
    // console.log("üöÄ ~ createNew ~ getNewBoard:", getNewBoard);

    // L√†m th√™m c√°c x·ª≠ l√Ω logic kh√°c v·ªõi c√°c Collection kh√°c t√πy ƒë·∫∑c th√π d·ª± √°n ... vv
    // B·∫Øn email, notification v·ªÅ cho admin khi c√≥ 1 c√°i board m·ªõi ƒë∆∞·ª£c t·∫°o ... vv

    // Tr·∫£ k·∫øt qu·∫£ v·ªÅ, trong Service lu√¥n c√≥ return
    return getNewBoard;
  } catch (error) {
    throw error;
  }
};

const getDetails = async (userId, boardId) => {
  try {
    const board = await boardModel.getDetails(userId, boardId);
    if (!board) {
      throw new ApiError(StatusCodes.NOT_FOUND, "Board not found!");
    }

    const resBoard = _.cloneDeep(board);
    // ƒê∆∞a Card v·ªÅ ƒë√∫ng Column

    // MongoDB c√≥ support h√†m equals
    resBoard.columns.forEach((column) => {
      column.cards = resBoard.cards.filter((card) =>
        card.columnId.equals(column._id)
      );

      // column.cards = resBoard.cards.filter(
      //   (card) => card.columnId.toString() === column._id.toString()
      // );
    });

    delete resBoard.cards;

    return resBoard;
  } catch (error) {
    throw error;
  }
};
const update = async (boardId, reqBody) => {
  try {
    const updateData = {
      ...reqBody,
      updatedAt: Date.now(),
    };
    const updatedBoard = await boardModel.update(boardId, updateData);

    return updatedBoard;
  } catch (error) {
    throw error;
  }
};
const moveCardToDifferentColumn = async (reqBody) => {
  try {
    //  B1: C·∫≠p nh·∫≠t m·∫£ng cardOrderIds c·ªßa Column ban ƒë·∫ßu ch·ª©a n√≥ (Hi·ªÉu b·∫£n ch·∫•t l√† x√≥a c√°i id c·ªßa Card ra kh·ªèi m·∫£ng)
    await columnModel.update(reqBody.prevColumnId, {
      cardOrderIds: reqBody.prevCardOrderIds,
      updatedAt: Date.now(),
    });
    // B2: C·∫≠p nh·∫≠t m·∫£ng cardOrderIds c·ªßa Column ti·∫øp theo (Hi·ªÉu b·∫£n ch·∫•t l√† th√™m id c·ªßa Card v√†o m·∫£ng)
    await columnModel.update(reqBody.nextColumnId, {
      cardOrderIds: reqBody.nextCardOrderIds,
      updatedAt: Date.now(),
    });
    // B3: C·∫≠p nh·∫≠t l·∫°i tr∆∞·ªùng columnId m·ªõi c·ªßa c√°i Card ƒë√£ k√©o */
    await cardModel.update(reqBody.curentCardId, {
      columnId: reqBody.nextColumnId,
    });

    return { updateResult: "Successfully" };
  } catch (error) {
    throw error;
  }
};

const getBoards = async (userId, page, itemsPerPage, queryFilters) => {
  try {
    // N·∫øu kh√¥ng t·ªìn t·∫°i page ho·∫∑c itemsPerPage t·ª´ ph√≠a FE th√¨ BE s·∫Ω c·∫ßn ph·∫£i lu√¥n g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh
    if (!page) page = DEFAULT_PAGE;
    if (!itemsPerPage) itemsPerPage = DEFAULT_ITEM_PER_PAGE;
    const result = await boardModel.getBoards(
      userId,
      parseInt(page, 10),
      parseInt(itemsPerPage, 10),
      queryFilters
    );

    return result;
  } catch (error) {
    throw error;
  }
};

export const boardService = {
  createNew,
  getDetails,
  update,
  moveCardToDifferentColumn,
  getBoards,
};
