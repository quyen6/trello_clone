/* eslint-disable no-useless-catch */
import { StatusCodes } from "http-status-codes";
import { pickUser } from "~/utils/formatters";
import { boardModel } from "~/models/boardModel";
import ApiError from "~/utils/ApiError";
import { BOARD_INVITATION_STATUS, INVITATION_TYPES } from "~/utils/constants";
import { userModel } from "~/models/userModel";
import { invitationModel } from "~/models/invitationModel";
// import { cloneDeep } from "lodash";

const createNewBoardInvitation = async (reqBody, inviterId) => {
  try {
    // Ng∆∞·ªùi ƒëi m·ªùi: ng∆∞·ªùi ƒëang request, t√¨m theo √¨ l·∫•y t·ª´ token
    const inviter = await userModel.findOneById(inviterId);
    // Ng∆∞·ªù ƒë∆∞·ª£c m·ªùi, l√°y email t·ª´ FE g·ª≠i l√™n
    const invitee = await userModel.findOneByEmail(reqBody.inviteeEmail);
    // T√¨m lu√¥n Board ƒë·ªÉ l·∫•y data x·ª≠ l√Ω
    const board = await boardModel.findOneById(reqBody.boardId);
    console.log("üöÄ ~ createNewBoardInvitation ~ board:", board);

    if (!invitee || !inviter || !board) {
      throw new ApiError(
        StatusCodes.NOT_FOUND,
        "Inviter, Invitee, Board not found!"
      );
    }

    // T·∫°o data c·∫ßn thi·∫øt ƒë·ªÉ l∆∞u v√†o DB
    // C√≥ th·ªÉ th·ª≠ b·ªè ho·∫∑c l√†m sai l·ªách type, boardInvitation, status ƒë·ªÉ test xem Modal validate ok kh√¥ng
    const newInvitationData = {
      inviterId,
      inviteeId: invitee._id.toString(), // chuy·ªÉn t·ª´ obectId sang string v√¨ sang b√™n Model c√≥ check l·∫°i d√¢t ·ªü h√†m create
      type: INVITATION_TYPES.BOARD_INVITATION,
      boardInvitation: {
        boardId: board._id.toString(),
        status: BOARD_INVITATION_STATUS.PENDING, // m·∫∑c ƒë·ªãnh ban ƒë·∫ßu l√† PENDING
      },
    };

    // G·ªçi sang Model ƒë·ªÉ l∆∞u v√†o DB
    const createdInvitation = await invitationModel.createNewBoardInvitation(
      newInvitationData
    );
    const getInvitation = await invitationModel.findOneById(
      createdInvitation.insertedId
    );

    // Ngo√†i th√¥ng tin c·ªßa c√°i board invitation m·ªõi t·∫°o th√¨ tr·∫£ v·ªÅ ƒë·ªß c·∫£ board, inviter,invitee cho FE tho·∫£i m√°i x·ª≠ l√Ω
    const resInvitation = {
      ...getInvitation,
      board,
      inviter: pickUser(inviter),
      invitee: pickUser(invitee),
    };
    return resInvitation;
  } catch (error) {
    throw error;
  }
};
const getInvitations = async (userId) => {
  try {
    const getInvitations = await invitationModel.findByUser(userId);
    console.log("üöÄ ~ getInvitations ~ getInvitations:", getInvitations);

    //V√¨ c√°c d·ªØ li·ªáu inviter, invitee v√† board l√† ƒëang ·ªü gi√° tr·ªã m·∫£ng 1 ph·∫ßn t·ª≠ n·∫øu l·∫•y ra ƒë∆∞·ª£c n√™n ta bi·∫øn ƒë·ªïi n√≥ v·ªÅ json object tr∆∞·ªõc khi tr·∫£ v·ªÅ cho ph√≠a FE
    const resInvitations = getInvitations.map((i) => {
      return {
        ...i,
        inviter: i.inviter[0] || {},
        invitee: i.invitee[0] || {},
        board: i.board[0] || {},
      };
    });

    return resInvitations;
  } catch (error) {
    throw error;
  }
};
const updateBoardInvitation = async (userId, invitationId, status) => {
  try {
    const getInvitation = await invitationModel.findOneById(invitationId);
    if (!getInvitation)
      throw new ApiError(StatusCodes.NOT_FOUND, "Invitation not found!");

    // Sau khi c√≥ Invitation t·ªìi th√¨ l·∫•y full th√¥ng tin c·ªßa board
    const boardId = getInvitation.boardInvitation.boardId;
    const getBoard = await boardModel.findOneById(boardId);
    if (!getBoard)
      throw new ApiError(StatusCodes.NOT_FOUND, "Board not found!");

    // Ki·ªÉm tra xem n·∫ø status l√† ACCEPTED join board m√† c√°i th·∫±ng user(invitee) ƒë√£ l√† owner ho·∫∑c member c·ªßa board r·ªìi th√¨ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    // Note: 2 m·∫£ng memberIds v√† ownerIds c·ªßa board n√≥ ƒëang l√† ki·ªÉu d·ªØ li·ªáu ObjectId n√™n cho n√≥ v·ªÅ String
    const boardOwnerAndMemberIds = [
      ...getBoard.ownerIds,
      ...getBoard.memberIds,
    ].toString();
    if (
      status === BOARD_INVITATION_STATUS.ACCEPTED &&
      boardOwnerAndMemberIds.includes(userId)
    ) {
      throw new ApiError(
        StatusCodes.NOT_ACCEPTABLE,
        "You are already a member of this board."
      );
    }

    // T·∫°o d·ªØ li·ªáu ƒë·ªÉ update b·∫£n ghi invitation
    const updateData = {
      boardInvitation: {
        ...getInvitation.boardInvitation,
        status: status, // status l√† ACCEPTED ho·∫∑c REJECTED do FE g·ª≠i l√™n
      },
    };
    // B∆∞·ªõc 1: C·∫≠p nh·∫≠t status trong b·∫£n ghi Invitation
    const updatedInvitation = await invitationModel.update(
      invitationId,
      updateData
    );

    // B∆∞·ªõc 2: N·∫øu tr∆∞·ªùng h·ª£p Accept m·ªôt l·ªùi m·ªùi th√†nh c√¥ng, th√¨ ph·∫£i th√™m th√¥ng tin c·ªßa th·∫±ng user(userId) v√†o b·∫£n ghi memberIds trong collection board
    if (
      updatedInvitation.boardInvitation.status ===
      BOARD_INVITATION_STATUS.ACCEPTED
    ) {
      await boardModel.pushMemberIds(boardId, userId);
    }

    return updatedInvitation;
  } catch (error) {
    throw error;
  }
};

export const invitationService = {
  createNewBoardInvitation,
  getInvitations,
  updateBoardInvitation,
};
