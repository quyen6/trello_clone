import Box from "@mui/material/Box";

import ListColumns from "./ListColumns/ListColumns";
import Column from "./ListColumns/Column/Column";
import Card from "./ListColumns/Column/ListCards/Card/Card";

import { mapOrder } from "~/utils/sorts";
import {
  DndContext,
  // PointerSensor,
  // MouseSensor,
  // TouchSensor,
  useSensor,
  useSensors,
  DragOverlay,
  defaultDropAnimationSideEffects,
  closestCorners,
  pointerWithin,
  // rectIntersection,
  getFirstCollision,
  // closestCenter,
} from "@dnd-kit/core";
import { MouseSensor, TouchSensor } from "~/customLibraries/DndKitSensors";
import { useEffect, useState, useCallback, useRef } from "react";
import { arrayMove } from "@dnd-kit/sortable";
import _, { isEmpty } from "lodash";
import { generatePlaceholderCard } from "~/utils/formatter";
import { useOutletContext } from "react-router-dom";

const ACTIVE_DRAG_ITEM_TYPE = {
  COLUMN: "ACTIVE_DRAG_ITEM_TYPE_COLUMN",
  CARD: "ACTIVE_DRAG_ITEM_TYPE_CARD",
};

const BoardContent = (props) => {
  const {
    board,
    moveColumns,
    moveCardInTheSameColumn,
    moveCardToDifferentColumn,
  } = props;
  const { resolvedMode } = useOutletContext();
  const [orderedColumns, setOrderedColumns] = useState([]);

  // c√πng 1 th·ªùi ƒëi·ªÉm th√¨ ch·ªâ c√≥ 1 ph·∫ßn t·ª≠ ƒëc k√©o (column ho·∫∑c card)
  const [activeDragItemId, setActiveDragItemId] = useState(null);
  const [activeDragItemType, setActiveDragItemType] = useState(null);
  const [activeDragItemData, setActiveDragItemData] = useState(null);
  const [oldColumnDataWhenDraggingCard, setOldColumnDataWhenDraggingCard] =
    useState(null);

  //ƒêi·ªÉm va ch·∫°m cu·ªëi c√πng (x·ª≠ l√Ω thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m)
  const lastOverId = useRef(null);

  useEffect(() => {
    setOrderedColumns(mapOrder(board?.columns, board?.columnOrderIds, "_id"));
  }, [board]);

  // const pointerSensor = useSensor(PointerSensor, {
  //   activationConstraint: { distance: 10 },
  // });

  // Y√™u c·∫ßu chu·ªôt di chuy·ªÉn 10px th√¨ m·ªõi k√≠ch ho·∫°t event, fix truongf h·ª£p click b·ªã g·ªçi event
  const mouseSensor = useSensor(MouseSensor, {
    activationConstraint: { distance: 10 },
  });

  // Nh·∫•n gi·ªØ 250ms v√† dung sai c·ªßa c·∫£m ·ª©ng 500px th√¨ m·ªõi k√≠ch ho·∫°t event
  const touchSensor = useSensor(TouchSensor, {
    activationConstraint: { delay: 250, tolerance: 500 },
  });
  // ∆Øu ti√™n s·ª≠ d·ª•ng k·∫øt h·ª£p 2 lo·∫°i sensors l√† mouse v√† touch ƒë·ªÉ c√≥ tr·∫£i nghi·ªám tr√™n mobile t·ªët nh·∫•t, kh√¥ng b·ªã bug
  // const sensors = useSensors(pointerSensor);
  const sensors = useSensors(mouseSensor, touchSensor);

  // T√¨m 1 Column theo CardId
  const findColumnByCardId = (cardId) => {
    // L∆∞u √Ω, n√™n d√πng c.cards thay v√¨ c.cardOrderIds b·ªüi v√¨ ·ªü b∆∞·ªõc handleDragOver ch√∫ng ta s·∫Ω l√†m d·ªØ li·ªáu cho cards ho√†n ch·ªânh tr∆∞·ªõc r·ªìi m·ªõi t·∫°o ra cardOrderIds m·ªõi
    return orderedColumns.find((column) =>
      column?.cards?.map((card) => card._id)?.includes(cardId)
    );
  };

  // Function chung x·ª≠ l√Ω vi·ªác c·∫≠p nh·∫≠t l·∫°i state trong tr∆∞·ªùng h·ª£p di chuy·ªÉn Card gi·ªØa c√°c Column kh√°c nhau
  const moveCardBetweenDifferentColumns = (
    overColumn,
    overCardId,
    active,
    over,
    activeColumn,
    activeDraggingCardId,
    activeDraggingCardData,
    triggerFrom
  ) => {
    setOrderedColumns((prevColumns) => {
      // T√¨m v·ªã tr√≠ index c·ªßa c√°i overCard trong column ƒë√≠ch n∆°i card s·∫Øp ƒë∆∞·ª£c th·∫£
      const overCardIndex = overColumn?.cards?.findIndex(
        (card) => card._id === overCardId
      );

      // Logic tinhs toans "CardIndex m·ªõi" - l·∫•y chu·∫©n t·ª´ code th∆∞ vi·ªán dnd kit
      let newCardIndex;
      const isBelowOverItem =
        active.rect.current.translated &&
        active.rect.current.translated.top > over.rect.top + over.rect.height;

      const modifier = isBelowOverItem ? 1 : 0;

      newCardIndex =
        overCardIndex >= 0
          ? overCardIndex + modifier
          : overColumn?.cards?.length + 1;

      const nextColumns = _.cloneDeep(prevColumns);

      const nextActiveColumn = nextColumns.find(
        (column) => column._id === activeColumn._id
      );
      const nextOverColumn = nextColumns.find(
        (column) => column._id === overColumn._id
      );

      if (nextActiveColumn) {
        // X√≥a Card ·ªü c√°i column active (c≈©ng c√≥ th·ªÉ hi·ªÉu l√† column c≈©, c√°i l√∫c m√† k√©o card ra kh·ªèi n√≥ ƒë·ªÉ sang column kh√°c)
        nextActiveColumn.cards = nextActiveColumn.cards.filter(
          (card) => card._id !== activeDraggingCardId
        );

        // Th√™m PlaceholderCard n·∫øu Column r·ªóng: b·ªã k√©o h·∫øt Card ƒëi, kh√¥ng c√≤n c√°i n√†o n·ªØa
        if (isEmpty(nextActiveColumn.cards)) {
          nextActiveColumn.cards = [generatePlaceholderCard(nextActiveColumn)];
        }

        // C·∫≠p nh·∫≠tl·∫°i m·∫£ng cardOrderIds cho chu·∫©n d·ªØ li·ªáu
        nextActiveColumn.cardOrderIds = nextActiveColumn.cards.map(
          (card) => card._id
        );
      }
      if (nextOverColumn) {
        // Ki·ªÉm tra Card ƒëang k√©o n√≥ c√≥ t·ªìn t·∫°i ·ªü overColumn ch∆∞a, n·∫øu c√≥ th√¨ c·∫ßn x√≥a n√≥ tr∆∞·ªõc
        nextOverColumn.cards = nextOverColumn.cards.filter(
          (card) => card._id !== activeDraggingCardId
        );

        // ƒê·ªëi v·ªõi tr∆∞·ªùng h·ª£p dragEnd th√¨ ph·∫£i c·∫≠p nh·∫≠t l·∫°i chu·∫©n d·ªØ li·ªáu columnId trong card sau khi k√©o card gi·ªØa 2 column kh√°c nhau
        const rebuild_activeDraggingCardData = {
          ...activeDraggingCardData,
          columnId: nextOverColumn._id,
        };

        // Th√™m c√°i Card ƒëang k√©o v√†o overColumn theo v·ªã tr√≠ index m·ªõi
        nextOverColumn.cards = nextOverColumn.cards.toSpliced(
          newCardIndex,
          0,
          rebuild_activeDraggingCardData
        );

        // X√≥a c√°i Placeholder Card n·∫øu trong Column c√≥ t·ªìn t·∫°i √≠t nh·∫•t 1 Card
        nextOverColumn.cards = nextOverColumn.cards.filter(
          (c) => !c.FE_PlaceholderCard
        );

        // C·∫≠p nh·∫≠tl·∫°i m·∫£ng cardOrderIds cho chu·∫©n d·ªØ li·ªáu
        nextOverColumn.cardOrderIds = nextOverColumn.cards.map(
          (card) => card._id
        );
      }

      // N·∫øu func n√†y ƒë∆∞·ª£c g·ªçi t·ª´ handleDragEnd nghia l√† ƒë√£ k√©o th·∫£ xong, l√∫c n√†y m·ªõi x·ª≠ l√Ω g·ªçi API 1 l·∫ßn ·ªü ƒë√¢y
      if (triggerFrom === "handleDragEnd") {
        moveCardToDifferentColumn(
          activeDraggingCardId,
          oldColumnDataWhenDraggingCard._id,
          nextOverColumn._id,
          nextColumns
        );
      }

      return nextColumns;
    });
  };

  // Trigger Khi b·∫Øt ƒë·∫ßu k√©o 1 ph·∫ßn t·ª≠
  const handleDragStart = (event) => {
    setActiveDragItemId(event?.active?.id);
    setActiveDragItemType(
      event?.active?.data?.current?.columnId
        ? ACTIVE_DRAG_ITEM_TYPE.CARD
        : ACTIVE_DRAG_ITEM_TYPE.COLUMN
    );
    setActiveDragItemData(event?.active?.data?.current);

    // N·∫øu l√† k√©o Card th√¨ m·ªõi th·ª±c hi·ªán nh·ªØng h√†nh ƒë·ªông set gi√° tr·ªã oldColumn
    if (event?.active?.data?.current?.columnId) {
      setOldColumnDataWhenDraggingCard(findColumnByCardId(event?.active?.id));
    }
  };

  // Trigger trong qu√° tr√¨nh k√©o (drag) m·ªôt ph·∫ßn t·ª≠
  const handleDragOver = (event) => {
    // Kh√¥ng l√†m g√¨ khi k√©o Column
    if (activeDragItemType === "ACTIVE_DRAG_ITEM_TYPE_COLUMN") return;

    // N·∫øu k√©o Card th√¨ x·ª≠ l√Ω th·ªÉm ƒë·ªÉ c√≥ th·ªÉ k√©o Card qua l·∫°i gi·ªØa c√°c Column
    const { active, over } = event;

    // C·∫ßn ƒë·∫©m b·∫£o n·∫øu kh√¥ng t·ªìn t·∫°i active ho·∫∑c over (khi k√©o th·∫£ ra kh·ªèi ph·∫°m v·ªã container) th√¨ kh√¥ng l√†m g√¨ tr√°nh crash trang
    if (!active || !over) return;

    const {
      id: activeDraggingCardId,
      data: { current: activeDraggingCardData },
    } = active;
    const { id: overCardId } = over;
    // T√¨m 2 c√°i Columns theo cardId
    const activeColumn = findColumnByCardId(activeDraggingCardId);
    const overColumn = findColumnByCardId(overCardId);

    if (!activeColumn || !overColumn) return;

    if (activeColumn._id !== overColumn._id) {
      moveCardBetweenDifferentColumns(
        overColumn,
        overCardId,
        active,
        over,
        activeColumn,
        activeDraggingCardId,
        activeDraggingCardData,
        "handleDragOver"
      );
    }
  };

  //  Trigger Khi k·∫øt th√∫c h√†nh ƒë·ªông k√©o 1 ph·∫ßn t·ª≠ => h√†nh ƒë·ªông th·∫£ (drag)
  const handleDragEnd = (event) => {
    const { active, over } = event;

    // C·∫ßn ƒë·∫©m b·∫£o n·∫øu kh√¥ng t·ªìn t·∫°i active ho·∫∑c over (khi k√©o th·∫£ ra kh·ªèi ph·∫°m v·ªã container) th√¨ kh√¥ng l√†m g√¨ tr√°nh crash trang
    if (!active || !over) return;
    // console.log("üöÄ ~ handleDragEnd ~ event:", event);

    // X·ª≠ l√Ω k√©o th·∫£ Card
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD) {
      const {
        id: activeDraggingCardId,
        data: { current: activeDraggingCardData },
      } = active;
      const { id: overCardId } = over;
      // T√¨m 2 c√°i Columns theo cardId
      const activeColumn = findColumnByCardId(activeDraggingCardId);
      const overColumn = findColumnByCardId(overCardId);

      if (!activeColumn || !overColumn) return;

      // K√©o th·∫£ Card qua 2 Column kh√°c nhau

      // Ph·∫£i d√πng t·ªõi activeDragItemData.columnId ho·∫∑c oldColumnDataWhenDraggingCard (set v√†o state t·ª´ b∆∞·ªõc handleStartStart) ch·ª© kh√¥ng ph·∫£i activeData trong scope handleDragEnd n√†y v√¨ sau khi ƒëi qua onDagOver t·ªõi ƒë√¢y state c·ªßa Card ƒë√£ b·ªã c·∫≠p nh·∫≠t m·ªôt l·∫ßn

      if (oldColumnDataWhenDraggingCard._id !== overColumn._id) {
        moveCardBetweenDifferentColumns(
          overColumn,
          overCardId,
          active,
          over,
          activeColumn,
          activeDraggingCardId,
          activeDraggingCardData,
          "handleDragEnd"
        );
      } else {
        // K√©o th·∫£ Card trong 1 Column

        // L·∫•y v·ªã tr√≠ c≈© t·ª´ th·∫±ng oldColumnDataWhenDraggingCard
        const oldCardIndex = oldColumnDataWhenDraggingCard?.cards.findIndex(
          (c) => c._id === activeDragItemId
        );
        // L·∫•y v·ªã tr√≠ m·ªõi t·ª´ th·∫±ng over
        const newCardIndex = overColumn?.cards.findIndex(
          (c) => c._id === overCardId
        );

        // d√πng arrayMove v√¨ k√©o Card trong 1 Cloumn th√¨ t∆∞∆°ng t·ª± v·ªõi logic k√©o Column trong 1 Board Content
        const dndOrderedCards = arrayMove(
          oldColumnDataWhenDraggingCard?.cards,
          oldCardIndex,
          newCardIndex
        );
        const dndOrderedCardIds = dndOrderedCards.map((c) => c._id);

        setOrderedColumns((prevColumns) => {
          const nextColumns = _.cloneDeep(prevColumns);

          // T√¨m t·ªõi c√°i Column m√† ch√∫ng ta ƒëang th·∫£
          const targetColumn = nextColumns.find(
            (c) => c._id === overColumn._id
          );

          // C·∫≠p nh·∫≠t 2gias tr·ªã cards v√† cardOrderIds trong c√°i targetColumn
          targetColumn.cards = dndOrderedCards;
          targetColumn.cardOrderIds = dndOrderedCardIds;

          return nextColumns;
        });
        //
        moveCardInTheSameColumn(
          dndOrderedCards,
          dndOrderedCardIds,
          oldColumnDataWhenDraggingCard._id
        );
      }
    }

    // X·ª≠ l√Ω k√©o th·∫£ Column
    if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) {
      if (active.id !== over.id) {
        // L·∫•y v·ªã tr√≠ c≈© t·ª´ th·∫±ng active
        const oldColumnIndex = orderedColumns.findIndex(
          (c) => c._id === active.id
        );
        // L·∫•y v·ªã tr√≠ m·ªõi t·ª´ th·∫±ng over
        const newColumnIndex = orderedColumns.findIndex(
          (c) => c._id === over.id
        );

        // d√πng arrayMove ƒë·ªÉ s·∫Øp x·∫øp l·∫°i columns ban ƒë·∫ßu
        const dndOrderedColumns = arrayMove(
          orderedColumns,
          oldColumnIndex,
          newColumnIndex
        );

        // V·∫´n g·ªçi update state ƒë·ªÉ tr√°nh delay ho·∫∑c flickering
        setOrderedColumns(dndOrderedColumns);

        /**
         * G·ªçi l√™n props function moveColumns n·∫±m ·ªü component cha cao nh·∫•t (boards/_id.jsx)
         * L∆∞u √Ω: V·ªÅ sau ·ªü h·ªçc ph·∫ßn MERN Stack Advance n√¢ng cao h·ªçc tr·ª±c ti·∫øp m√¨nh s·∫Ω v·ªõi m√¨nh th√¨ ch√∫ng ta s·∫Ω ƒë∆∞a d·ªØ li·ªáu Board ra ngo√†i Redux Global Store
         * v√† l√∫c n√†y ch√∫ng ta c√≥ th·ªÉ g·ªçi lu√¥n API ·ªü ƒë√¢y l√† xong thay v√¨ ph·∫£i l·∫ßn l∆∞·ª£t g·ªçi ng∆∞·ª£c l√™n nh·ªØng component cha ph√≠a b√™n tr√™n. (ƒê·ªïi v·ªõi component con n·∫±m c√†ng s√¢u th√¨ c√†ng kh·ªï :D)
         * V·ªõi vi·ªác s·ª≠ d·ª•ng Redux nh∆∞ v·∫≠y th√¨ code s·∫Ω Clean chu·∫©n ch·ªânh h∆°n r·∫•t  nhi·ªÅu.
         */
        moveColumns(dndOrderedColumns);
      }
    }

    // Nh·ªØng x·ª≠ li·ªáu sau khi k√©o th·∫£ lu√¥n ph·∫£i ƒë∆∞a v·ªÅ gi√° tr·ªã null m·∫∑c ƒë·ªãnh ban ƒë·∫ßu
    setActiveDragItemId(null);
    setActiveDragItemType(null);
    setActiveDragItemData(null);
    setOldColumnDataWhenDraggingCard(null);
  };

  // Animation code DragOverlay
  const customDropAnimation = {
    sideEffects: defaultDropAnimationSideEffects({
      styles: {
        active: {
          opacity: "0.5",
        },
      },
    }),
  };

  const collisionDetectionStrategy = useCallback(
    (args) => {
      if (activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN) {
        return closestCorners({ ...args });
      }
      // Thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m
      const pointerIntersections = pointerWithin(args);

      // K√©o 1 c√°i card c√≥ image l·ªõn v√† k√©o ph√≠a tr√™n c√πng ra kh·ªèi khu v·ª±c k√©o th·∫£
      if (!pointerIntersections?.length) return;

      // const intersections =
      //   pointerIntersections?.length > 0
      //     ? pointerIntersections
      //     : rectIntersection(args);

      //T√¨m overId ƒë·∫ßu ti√™n
      let overId = getFirstCollision(pointerIntersections, "id");
      if (overId) {
        // N·∫øu c√°i over n√≥ l√† column th√¨ s·∫Ω t√¨m t·ªõi c√°i cardId g·∫ßn nh·∫•t b√™n trong khu v·ª±c va ch·∫°m ƒë√≥ d·ª±a v√†o thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m closestCenter ho·∫∑c closestCorners ƒë·ªÅu ƒë∆∞·ª£c. Tuy nhi√™n ·ªü ƒë√¢y d√πng closestCorners th·∫•y m∆∞·ª£t m√† h∆°n
        const checkColumn = orderedColumns.find((c) => c._id === overId);
        if (checkColumn) {
          // console.log("üöÄ ~ BoardContent ~ overId before :", overId);
          overId = closestCorners({
            ...args,
            droppableContainers: args.droppableContainers.filter(
              (container) => {
                return (
                  container.id !== overId &&
                  checkColumn?.cardOrderIds.includes(container.id)
                );
              }
            ),
          })[0]?.id;
          // console.log("üöÄ ~ BoardContent ~ overId after :", overId);
        }
        lastOverId.current = overId;
        return [{ id: overId }];
      }
      return lastOverId.current ? [{ id: lastOverId.current }] : [];
    },
    [activeDragItemType, orderedColumns]
  );
  return (
    <DndContext
      sensors={sensors}
      // Thu·∫≠t to√°n ph√°t hi·ªán va ch·∫°m
      // collisionDetection={closestCorners} // d√πng b·ªã bug flickering
      collisionDetection={collisionDetectionStrategy}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <Box
        sx={{
          width: "100%",
          height: (theme) => theme.trello.boardContentHeight,
          backgroundColor: resolvedMode === "dark" ? "#34495e" : "#f5f7fa",
          p: "10px 0",
        }}
      >
        <ListColumns columns={orderedColumns} />
        <DragOverlay dropAnimation={customDropAnimation}>
          {activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.COLUMN &&
            activeDragItemData && <Column column={activeDragItemData} />}
          {activeDragItemType === ACTIVE_DRAG_ITEM_TYPE.CARD &&
            activeDragItemData && <Card card={activeDragItemData} />}
        </DragOverlay>
      </Box>
    </DndContext>
  );
};

export default BoardContent;
